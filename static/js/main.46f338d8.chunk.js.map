{"version":3,"sources":["actions/index.js","pages/Login.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["saveExpense","payload","type","Login","state","email","password","isDisabled","handleChange","bind","handleClick","target","name","emailRegex","value","checked","this","setState","test","length","props","history","saveUser","push","className","placeholder","data-testid","onChange","disabled","onClick","React","Component","connect","dispatch","Wallet","id","description","currency","method","tag","isEditing","exchangeRates","handleDelete","getTotal","handleEdit","fetchCurrency","expenses","reduce","prev","cur","ask","e","preventDefault","fetchExpense","editExpense","array","obj","splice","deleteExpense","expenseEdited","find","el","Number","currencies","result","addBut","toFixed","htmlFor","map","code","key","element","split","user","wallet","a","fetch","response","json","data","USDT","Object","values","console","log","error","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","action","filter","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.46f338d8.chunk.js","sourcesContent":["// Coloque aqui suas actions\nexport const SAVE_USER = 'SAVE_USER';\nexport const GET_CURRENCY = 'GET_CURRENCY';\nexport const SAVE_EXPENSE = 'SAVE_EXPENSE';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\nexport const EDIT_EXPENSE = 'EDIT_EXPENSE';\n\nexport const saveUserAction = (payload) => ({\n  type: SAVE_USER,\n  payload,\n});\n\nconst getCurrency = (payload) => ({\n  type: GET_CURRENCY,\n  payload,\n});\n\nexport const fetchCurrencyAction = () => async (dispatch) => {\n  try {\n    const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const data = await response.json();\n    delete data.USDT;\n    const array = Object.values(data);\n    const result = array.map((el) => el.code);\n    console.log(result);\n    dispatch(getCurrency(result));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst saveExpense = (payload) => ({\n  type: SAVE_EXPENSE,\n  payload,\n});\n\nexport const fetchExpenseAction = (obj) => async (dispatch) => {\n  try {\n    const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const data = await response.json();\n    delete data.USDT;\n    const payload = { ...obj, exchangeRates: data };\n    dispatch(saveExpense(payload));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const deleteExpenseAction = (payload) => ({\n  type: DELETE_EXPENSE,\n  payload,\n});\n\nexport const editExpenseAction = (payload) => ({\n  type: EDIT_EXPENSE,\n  payload,\n});\n","import React from 'react';\nimport './Login.css'\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { saveUserAction } from '../actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n      isDisabled: true,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange({ target }) {\n    const { name } = target;\n    const emailRegex = /^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+.com$/;\n    const minLength = 6;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    this.setState({\n      [name]: value,\n    }, () => {\n      const { email, password } = this.state;\n      if (emailRegex.test(email) && password.length >= minLength) {\n        this.setState({ isDisabled: false });\n      } else {\n        this.setState({ isDisabled: true });\n      }\n    });\n  }\n\n  handleClick() {\n    const { history, saveUser } = this.props;\n    const { email } = this.state;\n    saveUser(email);\n    history.push('/ProjectTrybeWallet/carteira');\n  }\n\n  render() {\n    const { email, password, isDisabled } = this.state;\n    return (\n      <div className='background'>\n        <div className='card-panel logincard'>\n          <h4>TrybeWallet</h4>\n          <div className=\"input-field\">\n            <input\n              type=\"email\"\n              name=\"email\"\n              className=\"input\"\n              placeholder=\"Email\"\n              value={ email }\n              data-testid=\"email-input\"\n              onChange={ this.handleChange }\n            />\n          </div>\n          <div className=\"input-field\">\n            <input\n              type=\"password\"\n              name=\"password\"\n              className=\"input\"\n              placeholder=\"Senha\"\n              value={ password }\n              data-testid=\"password-input\"\n              onChange={ this.handleChange }\n            />\n          </div>\n          <button\n            type=\"submit\"\n            className=\"btn waves-effect waves-light\"\n            disabled={ isDisabled }\n            onClick={ this.handleClick }\n          >\n            Entrar\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveUser: (email) => dispatch(saveUserAction(email)),\n});\n\nLogin.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any.isRequired).isRequired,\n  saveUser: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport './Wallet.css'\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteExpenseAction,\n  editExpenseAction, fetchCurrencyAction, fetchExpenseAction } from '../actions';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: 0,\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      isEditing: false,\n      exchangeRates: {},\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.getTotal = this.getTotal.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n  }\n\n  componentDidMount() {\n    const { fetchCurrency } = this.props;\n    fetchCurrency();\n  }\n\n  getTotal() {\n    const { expenses } = this.props;\n    const total = expenses\n      .reduce((prev, cur) => prev + (cur.exchangeRates[cur.currency].ask * cur.value), 0);\n    return total;\n  }\n\n  handleChange({ target }) {\n    const { name } = target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    const { value,\n      description, currency, method, tag, isEditing, id, exchangeRates } = this.state;\n    const { expenses, fetchExpense, editExpense } = this.props;\n    if (isEditing) {\n      const array = expenses;\n      const obj = { id, value, description, currency, method, tag, exchangeRates };\n      array.splice(id, 1, obj);\n      editExpense(array);\n      this.setState({ isEditing: false });\n    } else {\n      const obj = { id: expenses.length, value, description, currency, method, tag };\n      fetchExpense(obj);\n    }\n    this.setState({ value: 0 });\n  }\n\n  handleDelete({ target }) {\n    const { deleteExpense } = this.props;\n    deleteExpense(target.id);\n  }\n\n  handleEdit({ target }) {\n    const { expenses } = this.props;\n    this.setState({ isEditing: true });\n    const expenseEdited = expenses.find((el) => Number(el.id) === Number(target.id));\n    this.setState({\n      value: expenseEdited.value,\n      description: expenseEdited.description,\n      currency: expenseEdited.currency,\n      method: expenseEdited.method,\n      tag: expenseEdited.tag,\n      exchangeRates: expenseEdited.exchangeRates,\n      id: expenseEdited.id,\n    });\n  }\n\n  render() {\n    const { email, currencies, expenses } = this.props;\n    const { value, description, currency, method, tag, isEditing } = this.state;\n    const result = this.getTotal();\n    const addBut = (\n      <button\n        className=\"waves-effect waves-light btn button\"\n        type=\"submit\"\n        onClick={ this.handleClick }\n      >\n        Adicionar despesa\n      </button>);\n    const table = ['Descrição', 'Tag', 'Método de pagamento', 'Valor', 'Moeda',\n      'Câmbio utilizado', 'Valor convertido', 'Moeda de conversão', 'Editar/Excluir'];\n    return (\n      <>\n        <header>\n          <h6 data-testid=\"email-field\">{`Email: ${email}`}</h6>\n          <h6 data-testid=\"total-field\">{`Total: ${result.toFixed(2)}`}</h6>\n          <h6 data-testid=\"header-currency-field\">Moeda: BRL</h6>\n        </header>\n        <form className=\"form row\">\n          <div className=\"col s2\">\n          <label htmlFor=\"value-input\">\n            Valor:\n            <input\n              type=\"number\"\n              data-testid=\"value-input\"\n              id=\"value-input\"\n              name=\"value\"\n              value={ value }\n              onChange={ this.handleChange }\n            />\n          </label>\n          </div>\n          <div className=\"col s2\">\n          <label htmlFor=\"description-input\">\n            Descrição:\n            <input\n              type=\"text\"\n              data-testid=\"description-input\"\n              id=\"description-input\"\n              name=\"description\"\n              value={ description }\n              onChange={ this.handleChange }\n            />\n          </label>\n          </div>\n          <div className=\"col s2\">\n          <label htmlFor=\"currency-input\">\n            Moeda:\n            <select\n              name=\"currency\"\n              id=\"currency-input\"\n              className=\"browser-default\"\n              data-testid=\"currency-input\"\n              onChange={ this.handleChange }\n              value={ currency }\n            >\n              {currencies && (currencies.map((code) => (\n                <option key={ code } data-testid={ code } value={ code }>{ code }</option>\n              )))}\n              {/* {currencies && (currencies.map(({ code }) => (\n                <option key={ code } data-testid={ code } value={ code }>{ code }</option>\n              )))} */}\n            </select>\n          </label>\n          </div>\n          <div className=\"col s2\">\n          <label htmlFor=\"method-input\">\n            Método de Pagamento:\n            <select\n              name=\"method\"\n              id=\"method-input\"\n              className=\"browser-default\"\n              data-testid=\"method-input\"\n              onChange={ this.handleChange }\n              value={ method }\n            >\n              <option value=\"Dinheiro\">Dinheiro</option>\n              <option value=\"Cartão de crédito\">Cartão de crédito</option>\n              <option value=\"Cartão de débito\">Cartão de débito</option>\n            </select>\n          </label>\n          </div>\n          <div className=\"col s2\">\n          <label htmlFor=\"tag-input\">\n            Tag:\n            <select\n              name=\"tag\"\n              id=\"tag-input\"\n              className=\"browser-default\"\n              data-testid=\"tag-input\"\n              onChange={ this.handleChange }\n              value={ tag }\n            >\n              <option value=\"Alimentação\">Alimentação</option>\n              <option value=\"Lazer\">Lazer</option>\n              <option value=\"Trabalho\">Trabalho</option>\n              <option value=\"Transporte\">Transporte</option>\n              <option value=\"Saúde\">Saúde</option>\n            </select>\n          </label>\n          </div>\n          <div className=\"col s2\">\n            {isEditing\n              ? <button className=\"waves-effect waves-light btn button\" type=\"submit\" onClick={ this.handleClick }>Editar despesa</button>\n              : addBut}\n          </div>\n        </form>\n        <table className=\"centered teal accent-3 striped\">\n          <thead>\n            <tr>\n              {table.map((element) => (<th key={ element }>{element}</th>))}\n            </tr>\n          </thead>\n          <tbody>\n            {expenses.map((el) => (\n              <tr key={ el.id }>\n                <td>{el.description}</td>\n                <td>{el.tag}</td>\n                <td>{el.method}</td>\n                <td>{Number(el.value).toFixed(2)}</td>\n                <td>{el.exchangeRates[el.currency].name.split('/Real Brasileiro')}</td>\n                <td>{Number(el.exchangeRates[el.currency].ask).toFixed(2)}</td>\n                <td>{(el.exchangeRates[el.currency].ask * el.value).toFixed(2)}</td>\n                <td>Real</td>\n                <td>\n                  <button\n                    type=\"button\"\n                    data-testid=\"edit-btn\"\n                    className=\"waves-effect waves-light btn-small yellow darken-3\"\n                    id={ el.id }\n                    onClick={ this.handleEdit }\n                  >\n                    E\n                  </button>\n                  <button\n                    type=\"button\"\n                    data-testid=\"delete-btn\"\n                    className=\"waves-effect waves-light btn-small red darken-3\"\n                    id={ el.id }\n                    onClick={ this.handleDelete }\n                  >\n                    X\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrency: () => dispatch(fetchCurrencyAction()),\n  fetchExpense: (state) => dispatch(fetchExpenseAction(state)),\n  deleteExpense: (state) => dispatch(deleteExpenseAction(state)),\n  editExpense: (state) => dispatch(editExpenseAction(state)),\n});\n\nWallet.propTypes = {\n  email: PropTypes.string.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  fetchCurrency: PropTypes.func.isRequired,\n  fetchExpense: PropTypes.func.isRequired,\n  deleteExpense: PropTypes.func.isRequired,\n  editExpense: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/ProjectTrybeWallet/\" component={ Login } />\n      <Route exact path=\"/ProjectTrybeWallet/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SAVE_USER } from '../actions';\n\n// Esse reducer será responsável por tratar as informações da pessoa usuária\nconst INITIAL_STATE = { email: '' };\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SAVE_USER:\n    return {\n      ...state,\n      email: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport { GET_CURRENCY, SAVE_EXPENSE, DELETE_EXPENSE, EDIT_EXPENSE } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nconst wallet = (state = INITIAL_STATE, { payload, type }) => {\n  // const array = state.expenses;\n  // if (type === EDIT_EXPENSE) {\n  //   array.splice(payload.id, 1, payload);\n  // }\n  switch (type) {\n  case GET_CURRENCY:\n    return {\n      ...state,\n      currencies: Object.values(payload),\n    };\n  case SAVE_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses, payload],\n    };\n  case DELETE_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.filter((el) => Number(el.id) !== Number(payload)),\n    };\n  case EDIT_EXPENSE:\n    return {\n      ...state,\n      expenses: payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n// import wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}